"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä—è–º—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –∑–æ–Ω–∞–º
"""

import sys
import os

sys.path.append(os.path.join(os.path.dirname(__file__), "api_client"))
from api_client import ApiClient
import asyncio

client = ApiClient()


async def main():
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client.initialize("http://127.0.0.1:8000")

    try:
        login_response = await client.authentication.login(
            username_body="user", password_body="Ls27jTmr"
        )
        print(f"‚úÖ Login response: {login_response}")
        print(f"Type: {type(login_response)}")
        await client.close()
        client._headers.update(Authorization=f"Bearer {login_response.token}")

        # print(client._headers)

        # upload_response = await client.uploads.upload_strings()
        # print(f"Upload response class: {upload_response.__class__}")
        # print(f"‚úÖ Upload response: {upload_response}")
        # print(f"Type: {type(upload_response)}")

        # groups_response = await client.groups.find_many()
        # print(f"Groups response class: {groups_response.__class__}")
        # print(f"Has .data attribute: {hasattr(groups_response, 'data')}")
        # print(f"‚úÖ Groups response: {groups_response}")
        # print(f"Type: {type(groups_response)}")

        # sessions_response = await client.sessions.find_many()
        # print(f"Sessions response class: {sessions_response.__class__}")
        # print(f"Has .data attribute: {hasattr(sessions_response, 'data')}")
        # print(f"‚úÖ Sessions response: {sessions_response}")
        # print(f"Type: {type(sessions_response)}")

        # for session in sessions_response.data:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
        #     if session.account:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ account –Ω–µ None
        #         account = session.account
        #         print(f"‚úÖ Account phone: {account.get('phone', 'N/A')}")
        #         print(f"Account type: {type(account)}")
        #     else:
        #         print("Account is None")
        #     # break  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é

    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        await client.close()


if __name__ == "__main__":
    asyncio.run(main())


def test_direct_zone_access_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–æ–Ω–∞–º"""
    import sys
    import os

    # –î–æ–±–∞–≤–ª—è–µ–º test_clean –≤ –ø—É—Ç—å
    test_path = os.path.join(os.getcwd(), "test_clean")
    if test_path not in sys.path:
        sys.path.insert(0, test_path)

    try:
        from api_client import ApiClient

        client = ApiClient()

        # –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∑–æ–Ω–∞–º
        assert hasattr(client, "accounts")
        assert hasattr(client, "authentication")
        assert hasattr(client, "sessions")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∑–æ–Ω
        assert type(client.accounts).__name__ == "Accounts"
        assert type(client.authentication).__name__ == "Authentication"

        # –ú–µ—Ç–æ–¥—ã –≤ –∑–æ–Ω–∞—Ö
        assert hasattr(client.accounts, "find_many_accounts")
        assert hasattr(client.authentication, "login")

        # –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –º–µ—Ç–æ–¥–∞–º
        assert hasattr(client, "login")
        assert hasattr(client, "find_many_accounts")

        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        return False


# if __name__ == "__main__":
#     success = test_direct_zone_access_integration()
#     if success:
#         print("üéâ –¢–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!")
#     else:
#         print("‚ùå –¢–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")

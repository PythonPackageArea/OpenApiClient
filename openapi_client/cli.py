import argparse
import json
import os
import sys
import glob
from typing import List, Tuple, Optional

from openapi_client.internal.types.models import Project
from openapi_client.generator import ApiClientGenerator
from openapi_client.config import OpenApiConfig

import httpx
import jsonref


def confirm_choice(message: str) -> bool:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    while True:
        choice = input(f"{message} (y/n): ").lower().strip()
        if choice in ["y", "yes", "–¥–∞", ""]:
            return True
        elif choice in ["n", "no", "–Ω–µ—Ç"]:
            return False
        print("–í–≤–µ–¥–∏—Ç–µ y/n")


def find_client_packages() -> List[Tuple[str, OpenApiConfig]]:
    """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç-–ø–∞–∫–µ—Ç–æ–≤ –ø–æ openapi.toml —Ñ–∞–π–ª–∞–º"""
    packages = []

    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö openapi.toml —Ñ–∞–π–ª–æ–≤ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    for config_file in glob.glob("**/openapi.toml", recursive=True):
        config_dir = os.path.dirname(config_file)
        config = OpenApiConfig.from_file(config_file)

        if config:
            packages.append((config_dir, config))

    return packages


def select_from_menu(options: List[str], title: str) -> int:
    """–í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –∏–∑ –º–µ–Ω—é"""
    print(f"\n{title}")
    for i, option in enumerate(options, 1):
        print(f"[{i}] {option}")

    while True:
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: "))
            if 1 <= choice <= len(options):
                return choice - 1
            print(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(options)}")
        except ValueError:
            print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


def interactive_find_packages():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç-–ø–∞–∫–µ—Ç–æ–≤"""
    print("üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç-–ø–∞–∫–µ—Ç–æ–≤...")
    packages = find_client_packages()

    if not packages:
        print("‚ùå –ö–ª–∏–µ–Ω—Ç-–ø–∞–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(packages)} –∫–ª–∏–µ–Ω—Ç-–ø–∞–∫–µ—Ç–æ–≤:")

    package_options = []
    for config_dir, config in packages:
        package_options.append(f"{config_dir} ({config.url})")

    selected_idx = select_from_menu(package_options, "üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç-–ø–∞–∫–µ—Ç—ã:")
    selected_dir, selected_config = packages[selected_idx]

    print(f"\nüìç –í—ã–±—Ä–∞–Ω –ø–∞–∫–µ—Ç: {selected_dir}")
    print(f"   URL: {selected_config.url}")
    print(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {selected_config.dirname}")

    # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    action_options = [
        "–û–±–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é",
        "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å",
    ]

    action = select_from_menu(action_options, "\n‚öôÔ∏è –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–∞–∫–µ—Ç–æ–º?")

    if action == 0:  # –û–±–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        _generate_client_in_existing(selected_config, selected_dir)
    elif action == 1:  # –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É
        new_url = input(f"\nüîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL (—Ç–µ–∫—É—â–∏–π: {selected_config.url}): ")
        if new_url.strip():
            selected_config.url = new_url.strip()
            config_path = os.path.join(selected_dir, "openapi.toml")
            selected_config.save_to_file(config_path)
            print(f"üíæ URL –æ–±–Ω–æ–≤–ª–µ–Ω –≤ {config_path}")

        _generate_client_in_existing(selected_config, selected_dir)


def interactive_create_package():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
    print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç-–ø–∞–∫–µ—Ç–∞")

    # 1. –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ (–ø–µ—Ä–≤—ã–º!)
    package_name = input("üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ [api_client]: ").strip()
    if not package_name:
        package_name = "api_client"

    # 2. –ó–∞–ø—Ä–æ—Å –ø—É—Ç–∏ –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    target_dir = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ").strip()
    if not target_dir:
        print("‚ùå –ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(target_dir):
        if confirm_choice(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {target_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—Ç—å?"):
            try:
                os.makedirs(target_dir, exist_ok=True)
                print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {target_dir} —Å–æ–∑–¥–∞–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
                return
        else:
            return

    # 3. –ó–∞–ø—Ä–æ—Å URL –∫ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    url = input("üîó –í–≤–µ–¥–∏—Ç–µ URL –∫ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: ").strip()
    if not url:
        print("‚ùå URL –Ω–µ —É–∫–∞–∑–∞–Ω")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –∫–∞–∫ –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    client_dirname = package_name

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è:")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞: {package_name}")
    print(f"   –ü—É—Ç—å: {target_dir}")
    print(f"   URL: {url}")
    print(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {client_dirname}")

    if not confirm_choice("–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"):
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    config = OpenApiConfig(url=url, dirname=client_dirname)

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    original_cwd = os.getcwd()
    try:
        os.chdir(target_dir)
        _generate_client(config, ".")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
        config_path = os.path.join(client_dirname, "openapi.toml")
        config.save_to_file(config_path)
        print(f"üíæ –ö–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {config_path}")

    finally:
        os.chdir(original_cwd)


def _generate_client_core(config: OpenApiConfig) -> Project:
    """–Ø–¥—Ä–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ - —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    if not config.url:
        raise ValueError("URL –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    print(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ {config.url}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º - —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ URL
    if config.url.startswith(("http://", "https://")):
        # –≠—Ç–æ URL - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ HTTP
        openapi_spec = httpx.get(
            url=config.url + ("" if config.url.endswith("/") else "/") + "openapi.json"
        ).json()
    elif os.path.exists(config.url):
        # –≠—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª - —á–∏—Ç–∞–µ–º –µ–≥–æ
        with open(config.url, "r", encoding="utf-8") as f:
            openapi_spec = json.load(f)
    else:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ URL –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        try:
            openapi_spec = httpx.get(
                url="https://"
                + config.url
                + ("" if config.url.endswith("/") else "/")
                + "openapi.json"
            ).json()
        except:
            raise ValueError(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ {config.url}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É."
            )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
    original_spec = openapi_spec.copy()
    openapi_spec = dict(jsonref.loads(json.dumps(openapi_spec)))

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
    print("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞...")
    generator = ApiClientGenerator(
        openapi_spec, source_url=config.url, original_spec=original_spec
    )
    return generator.generate()


def _save_project_files(project: Project, target_path: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(project.files)} —Ñ–∞–π–ª–æ–≤...")

    for code_model in project.files:
        path = os.path.join(target_path, code_model.file_name)
        os.makedirs(os.path.dirname(path), exist_ok=True)

        with open(path, "w") as f:
            f.write(str(code_model))

    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üì¶ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –≤: {os.path.abspath(target_path)}")


def _generate_client(config: OpenApiConfig, work_dir: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
    if not config.dirname:
        raise ValueError("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    try:
        project = _generate_client_core(config)
        work_path = os.path.join(work_dir, config.dirname)
        _save_project_files(project, work_path)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        raise


def _generate_client_in_existing(config: OpenApiConfig, existing_package_dir: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–∞–∫–µ—Ç–∞"""
    try:
        project = _generate_client_core(config)
        _save_project_files(project, existing_package_dir)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        raise


def interactive_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("üéØ OpenAPI Client Generator")

    menu_options = ["–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç-–ø–∞–∫–µ—Ç—ã", "–°–æ–∑–¥–∞—Ç—å –ø–∞–∫–µ—Ç"]

    choice = select_from_menu(menu_options, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

    if choice == 0:
        interactive_find_packages()
    elif choice == 1:
        interactive_create_package()


def generate():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OpenAPI –∫–ª–∏–µ–Ω—Ç–∞"""
    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ OpenAPI")
    parser.add_argument("--url", type=str, help="URL –∫ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    parser.add_argument("--dirname", type=str, help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")
    parser.add_argument(
        "--init-config", action="store_true", help="–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª openapi.toml"
    )
    parser.add_argument(
        "--force", action="store_true", help="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
    if not any(vars(args).values()):
        interactive_menu()
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
    if args.init_config:
        config = OpenApiConfig(
            url=args.url,
            dirname=args.dirname or "api_client",
        )
        config.save_to_file()
        print("‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª openapi.toml")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞
    file_config = OpenApiConfig.from_file(search_dir=args.dirname)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if file_config and (args.url or args.dirname):
        # –ï—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–≥ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("üîß –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª openapi.toml:")
        print(f"   URL: {file_config.url}")
        print(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {file_config.dirname}")
        print()
        print("üìù –ü–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã:")
        if args.url:
            print(f"   URL: {args.url}")
        if args.dirname:
            print(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {args.dirname}")
        print()

        if args.force or confirm_choice("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∏–∑ —Ñ–∞–π–ª–∞?"):
            final_config = file_config
        else:
            final_config = file_config.merge_with_args(args)
    elif file_config:
        # –¢–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥ (–Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ —Ç–µ–∫—É—â–µ–π)
        config_location = "—É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏" if args.dirname else "openapi.toml"
        print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥ –∏–∑ {config_location}")
        final_config = file_config
    elif args.url:
        # –¢–æ–ª—å–∫–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        final_config = OpenApiConfig(url=args.url, dirname=args.dirname or "api_client")
    else:
        # –ù–µ—Ç –Ω–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∏ URL
        print("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ URL –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥ —Å --init-config")
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not final_config.url:
        print("‚ùå –û—à–∏–±–∫–∞: URL –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –Ω–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö")
        sys.exit(1)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    if args.dirname and file_config:
        print(f"üìÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É: {args.dirname}")
    else:
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏: {final_config.dirname}")

    try:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω dirname —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥ –≤ —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏,
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä—è–º–æ –≤ —ç—Ç—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if args.dirname and file_config:
            _generate_client_in_existing(final_config, args.dirname)
        else:
            _generate_client(final_config, ".")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if args.dirname and file_config:
            work_path = args.dirname
        else:
            work_path = os.path.join(os.getcwd(), final_config.dirname)
        if not file_config and (
            args.force or confirm_choice("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ openapi.toml?")
        ):
            config_path = os.path.join(work_path, "openapi.toml")
            final_config.save_to_file(config_path)
            print(f"üíæ –ö–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {config_path}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)


if __name__ == "__main__":
    generate()
